#! python3
# WaveHeightForecast.py - Рассчитывает высоту волны на оз. Кубенском
# Вологодской области исходя из данных о направлении и скорости
# ветра введенных пользователем

import re # импорт модуля для работы с регулярными выражениями

# Исходный массив данных

waveHightData = {
    'North':    {(3, 4, 5): [0.17, 0.31],(6, 7, 8): [0.33, 0.48],
                 (9, 10, 11): [0.39, 0.68], (12, 13, 14): [0.48, 0.78],
                 (15, 16, 17): [0.60, 0.95],
                 (18, 19, 20, 21): [0.69, 1.10]},
    'Northeast':{(3, 4, 5): [0.15, 0.29],(6, 7, 8): [0.26, 0.44],
                 (9, 10, 11): [0.37, 0.58], (12, 13, 14): [0.46, 0.71],
                 (15, 16, 17): [0.55, 0,87],
                 (18, 19, 20, 21): [0.64, 1.03]},
    'East':     {(3, 4, 5): [0.19, 0.29],(6, 7, 8): [0.30, 0.46],
                 (9, 10, 11): [0.43, 0.60], (12, 13, 14): [0.54, 0.73],
                 (15, 16, 17): [0.66, 0,90],
                 (18, 19, 20, 21): [0.74, 1.04]},
    'Southeast':{(3, 4, 5): [0.24, 0.36],(6, 7, 8): [0.34, 0.50],
                 (9, 10, 11): [0.45, 0.64], (12, 13, 14): [0.54, 0.75],
                 (15, 16, 17): [0.67, 0,91],
                 (18, 19, 20, 21): [0.77, 1.06]},
    'South':    {(3, 4, 5): [0.20, 0.27],(6, 7, 8): [0.34, 0.65],
                 (9, 10, 11): [0.46, 0.57], (12, 13, 14): [0.56, 0.69],
                 (15, 16, 17): [0.68, 0.86],
                 (18, 19, 20, 21): [0.78, 1.01]},
    'Southwest':{(3, 4, 5): [0.17, 0.25],(6, 7, 8): [0.30, 0.40],
                 (9, 10, 11): [0.42, 0.52], (12, 13, 14): [0.52, 0.69],
                 (15, 16, 17): [0.63, 0.80],
                 (18, 19, 20, 21): [0.74, 0.92]},
    'West':     {(3, 4, 5): [0.20, 0.27],(6, 7, 8): [0.32, 0.42],
                 (9, 10, 11): [0.44, 0.56], (12, 13, 14): [0.53, 0.67],
                 (15, 16, 17): [0.64, 0,87],
                 (18, 19, 20, 21): [0.75, 0.96]},
    'Northwest':{(3, 4, 5): [0.25, 0.38],(6, 7, 8): [0.36, 0.54],
                 (9, 10, 11): [0.48, 0.69], (12, 13, 14): [0.58, 0.83],
                 (15, 16, 17): [0.77, 1.01],
                 (18, 19, 20, 21): [0.81, 1.18]}}
    
def directionOfTheWindInput():
    #TODO: Исправить регулярное выражение так, чтобы точка или пробел
    #искали соответствие только если после них есть цифра
    #использовать опережающую проверку (?=...)
    """Функция запрашивает у пользователя направление ветра и проверяет
    правильность ввода с помощью регулярного выражения"""
    windDirectionRegex = re.compile(r'^([1-8]){1}(,|\.)?( )?((?<=,|\.| )[1-8])?')
    while True:
        print('Выберите направление ветра \n(наберите на клавиатуре' +
              'соответствующую цифру или две цифры через запятную, \n'
              'например 5 или, 3,2 и нажмите клавишу \'ENTER\'\n' +
              'С(1), СВ(2), В(3), ЮВ(4), Ю(5), ЮЗ(6), З(7), СЗ(8)')
        windDirectionNumbers = str(input())
        mo = windDirectionRegex.search(windDirectionNumbers)
        if mo:
            break
    windDirectionNumbers = mo.group()
    return windDirectionNumbers

def directionOfTheWindReturn(number):
    """Функция возвращает направление ветра из словаря waveHightData"""
    windDirectionList = list(waveHightData.keys())
    windDirections = []
    windDirection1 = windDirectionList[int(number[0]) - 1]
    windDirections.append(windDirection1)
    if len(number) != 1:
        windDirection2 = windDirectionList[int(number[len(number) - 1]) - 1]    
        windDirections.append(windDirection2)                        
    return windDirections


def windSpeedInput():
    #TODO: сделать так, что бы значения скоростей возвращались в виде списка
    """Функция запрашивает у пользователя скорость ветра и проверяет
    правильность ввода с помощью регулярного выражения"""
    windSpeedRegex = re.compile(r'\d+-\d+')
    while True:
        print()
        print('Введите скорость ветра в формате 5-10, 7-12 и т.п., затем' +
              ' нажмите\nклавишу \'ENTER\'\n(порывы не указываются!)')
        windSpeed = str(input())
        mo = windSpeedRegex.search(windSpeed)
        if mo:
            break
    return windSpeed

def windGustsInput():
    """Функция запрашивает у пользователя порывы ветра"""
    while True:
        print()
        print('Введите порыв ветра и нажмите клавишу \'ENTER\'')
        try:
            windGusts = int(input())
            break
        except ValueError:
            print('Необходимо ввести одно число')
            continue
    return windGusts


def searchWindFirectionAndWindSpeed(windDirections, speed):
    #TODO Сделать возможность проверять сколько цифр в первой и второй
    # скорости ветра и корректно их использовать
    #TODO Разбить задачу на две функции:
    #1. Поиск словарей содержащих скорости для указанных направлений
    # который должен работать с любым количеством словарей (цикл for)
    #2. Поиск внутри словарей из функции 1 по указанным скоростям
    # с помощью циклов for, которые должны работать с любым количеством
    # скоростей
    windDirection1 = waveHightData[windDirections[0]]
    windSpeed1 = int(speed[0])    
    windSpeedList = []
    for i in windDirection1.keys():        
        if windSpeed1 in i:
            windSpeedList.append(windDirection1[i][0])            
    if len(speed) != 1:
        windSpeed2 = int(speed[2])
        for i in windDirection1.keys():        
            if windSpeed2 in i:
                windSpeedList.append(windDirection1[i][1])
    if len(windDirections) != 1:
        windDirection2 = waveHightData[windDirections[1]]
        for i in windDirection2.keys():        
            if windSpeed1 in i:
                windSpeedList.append(windDirection2[i][0])
        if len(speed) != 1:
            windSpeed2 = int(speed[2])
            for i in windDirection2.keys():        
                if windSpeed2 in i:
                    windSpeedList.append(windDirection2[i][1])
    print(windSpeedList)
        
        
    
                                 
            
    
    
    
    
    
    
windDirectionNumbers = directionOfTheWindInput()
windDirections = directionOfTheWindReturn(windDirectionNumbers)
print('Направления ветра: ' + str(windDirections))
windSpeed = windSpeedInput()
print('Скорость ветра: ' + windSpeed + ' м/с')
windGusts = windGustsInput()
print('Порывы ветра: ' + str(windGusts) + ' м/с')
searchWindFirectionAndWindSpeed(windDirections, windSpeed)


    
            

# TODO: Расчет высоты волны исходя из введенных данных
# TODO: Вывод результата
